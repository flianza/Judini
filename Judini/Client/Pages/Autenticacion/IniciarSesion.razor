@page "/iniciar-sesion"

@using Judini.Client.Infraestructura

@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<EditForm Model="@this.Modelo" OnValidSubmit="this.OnSubmit">
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudIcon Icon="@CustomIcons.Judini" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width:100px; height:100px;" />
            </div>
        </MudItem>

        <DataAnnotationsValidator />
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h4">Judini</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="this.Modelo.NombreDeUsuario"
                          Label="Usuario"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="El usuario es requerido">
            </MudTextField>
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="@this.Modelo.Contrasenia"
                          Label="Contraseña"
                          Variant="Variant.Outlined"
                          InputType="@TipoInputContrasenia"
                          Adornment="Adornment.End"
                          AdornmentIcon="@IconoContrasenia"
                          OnAdornmentClick="ToggleContrasenia"
                          Required="true"
                          RequiredError="La contraseña es requerida">
            </MudTextField>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       ButtonType="ButtonType.Submit">
                Iniciar Sesion
            </MudButton>
        </MudItem>

        @if (!string.IsNullOrWhiteSpace(this.ErrorIniciarSesion))
        {
            <MudAlert Severity="Severity.Error" Class="mt-8 mud-width-full" Style="max-width:500px;" Elevation="25">@this.ErrorIniciarSesion</MudAlert>
        }
    </MudGrid>
</EditForm>

@code{
    IniciarSesionRequest Modelo { get; set; } = new IniciarSesionRequest();
    string ErrorIniciarSesion { get; set; }
    bool ConstraseniaVisible { get; set; }
    InputType TipoInputContrasenia { get; set; } = InputType.Password;
    string IconoContrasenia { get; set; } = Icons.Material.Filled.VisibilityOff;

    void ToggleContrasenia()
    {
        if (this.ConstraseniaVisible)
        {
            this.IconoContrasenia = Icons.Material.Filled.VisibilityOff;
            this.TipoInputContrasenia = InputType.Password;
        }
        else
        {
            this.IconoContrasenia = Icons.Material.Filled.Visibility;
            this.TipoInputContrasenia = InputType.Text;
        }

        this.ConstraseniaVisible = !this.ConstraseniaVisible;
    }

    async Task OnSubmit()
    {
        this.ErrorIniciarSesion = null;
        try
        {
            await this.authStateProvider.IniciarSesion(this.Modelo);

            this.navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            this.ErrorIniciarSesion = ex.Message;
        }
    }
}