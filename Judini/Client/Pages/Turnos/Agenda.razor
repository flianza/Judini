@page "/turnos/agenda"

@using Radzen
@using Judini.Client.Infraestructura

@inject IDateProvider dateProvider

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Agenda</MudText>

<MudGrid>
    <MudItem xs="12" md="9">
        <RadzenScheduler Style="height: 70vh" @ref=@scheduler TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                         TextProperty="Text" SelectedIndex="1" AppointmentRender="OnAppointmentRender">
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Euro" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Income</MudText>
                <MudText Typo="Typo.h5">125,000</MudText>
            </div>
        </MudPaper>
        @TimeZoneInfo.Local.DisplayName

    </MudItem>
</MudGrid>

@code {

    public class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    RadzenScheduler<Appointment> scheduler;

    TimeZoneInfo zona = TimeZoneInfo.FindSystemTimeZoneById("America/Argentina/Catamarca");
    IList<Appointment> appointments;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.appointments = new List<Appointment>
    {
            new Appointment { Start = this.dateProvider.Now.AddDays(-11), End = this.dateProvider.Now.AddDays(-10), Text = "Day off" },
            new Appointment { Start = this.dateProvider.Now.AddDays(-10), End = this.dateProvider.Now.AddDays(-8), Text = "Work from home" },
            new Appointment { Start = this.dateProvider.Now.AddDays(-2), End = this.dateProvider.Now.AddDays(-2), Text = "Birthday" },
            new Appointment { Start = this.dateProvider.Now, End = this.dateProvider.Now.AddHours(12), Text = "otra cosa" },
            new Appointment { Start = this.dateProvider.Now.AddHours(10), End = this.dateProvider.Now.AddHours(12), Text = "Online meeting" },
            new Appointment { Start = this.dateProvider.Now.AddHours(10), End = this.dateProvider.Now.AddHours(13), Text = "Skype call" },
            new Appointment { Start = this.dateProvider.Now.AddHours(14), End = this.dateProvider.Now.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
            new Appointment { Start = this.dateProvider.Now.AddDays(1), End = this.dateProvider.Now.AddDays(12), Text = "Vacation" },
        };


        foreach (var a in this.appointments)
        {
            Console.WriteLine($"{a.Text}: {TimeZoneInfo.ConvertTime(a.Start, zona).ToString()} -> {TimeZoneInfo.ConvertTime(a.End, zona).ToString()}");
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
        if (args.Data.Text == "Prueba")
        {
            args.Attributes["style"] = "background: green";
        }
    }

}
